package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"context"

	"github.com/dlukt/graphql-backend-starter/ent"
	"github.com/dlukt/graphql-backend-starter/graph/generated"
	"github.com/rs/xid"
)

// CreateProfile is the resolver for the createProfile field.
func (r *mutationResolver) CreateProfile(ctx context.Context, input ent.CreateProfileInput) (*ent.Profile, error) {
	client := ent.FromContext(ctx)
	return client.Profile.Create().SetInput(input).Save(ctx)
}

// UpdateProfile is the resolver for the updateProfile field.
func (r *mutationResolver) UpdateProfile(ctx context.Context, id xid.ID, input ent.UpdateProfileInput) (*ent.Profile, error) {
	client := ent.FromContext(ctx)
	return client.Profile.UpdateOneID(id).SetInput(input).Save(ctx)
}

// DeleteProfile is the resolver for the deleteProfile field.
func (r *mutationResolver) DeleteProfile(ctx context.Context, id xid.ID) (*xid.ID, error) {
	client := ent.FromContext(ctx)
	e := client.Profile.DeleteOneID(id).Exec(ctx)
	if e != nil {
		return nil, e
	}
	return &id, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
