directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateProfileInput is used for create Profile object.
Input was generated by ent.
"""
input CreateProfileInput {
  createTime: Time
  updateTime: Time
  sub: String!
  name: String!
  gender: String!
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/dlukt/graphql-backend-starter/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Profile implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time
  sub: String!
  name: String!
  gender: String!
}
"""
A connection to a list of items.
"""
type ProfileConnection {
  """
  A list of edges.
  """
  edges: [ProfileEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ProfileEdge {
  """
  The item at the end of the edge.
  """
  node: Profile
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Profile connections
"""
input ProfileOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Profiles.
  """
  field: ProfileOrderField!
}
"""
Properties by which Profile connections can be ordered.
"""
enum ProfileOrderField {
  CREATE_TIME
  UPDATE_TIME
  NAME
}
"""
ProfileWhereInput is used for filtering Profile objects.
Input was generated by ent.
"""
input ProfileWhereInput {
  not: ProfileWhereInput
  and: [ProfileWhereInput!]
  or: [ProfileWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  updateTimeIsNil: Boolean
  updateTimeNotNil: Boolean
  """
  sub field predicates
  """
  sub: String
  subNEQ: String
  subIn: [String!]
  subNotIn: [String!]
  subGT: String
  subGTE: String
  subLT: String
  subLTE: String
  subContains: String
  subHasPrefix: String
  subHasSuffix: String
  subEqualFold: String
  subContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  gender field predicates
  """
  gender: String
  genderNEQ: String
  genderIn: [String!]
  genderNotIn: [String!]
  genderGT: String
  genderGTE: String
  genderLT: String
  genderLTE: String
  genderContains: String
  genderHasPrefix: String
  genderHasSuffix: String
  genderEqualFold: String
  genderContainsFold: String
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  profiles(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Profiles returned from the connection.
    """
    orderBy: ProfileOrder

    """
    Filtering options for Profiles returned from the connection.
    """
    where: ProfileWhereInput
  ): ProfileConnection!
}
"""
The builtin Time type
"""
scalar Time
"""
UpdateProfileInput is used for update Profile object.
Input was generated by ent.
"""
input UpdateProfileInput {
  updateTime: Time
  clearUpdateTime: Boolean
  sub: String
  name: String
  gender: String
}
