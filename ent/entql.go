// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/dlukt/graphql-backend-starter/ent/profile"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 1)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   profile.Table,
			Columns: profile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: profile.FieldID,
			},
		},
		Type: "Profile",
		Fields: map[string]*sqlgraph.FieldSpec{
			profile.FieldCreateTime: {Type: field.TypeTime, Column: profile.FieldCreateTime},
			profile.FieldUpdateTime: {Type: field.TypeTime, Column: profile.FieldUpdateTime},
			profile.FieldSub:        {Type: field.TypeString, Column: profile.FieldSub},
			profile.FieldName:       {Type: field.TypeString, Column: profile.FieldName},
			profile.FieldGender:     {Type: field.TypeString, Column: profile.FieldGender},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (pq *ProfileQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ProfileQuery builder.
func (pq *ProfileQuery) Filter() *ProfileFilter {
	return &ProfileFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *ProfileMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ProfileMutation builder.
func (m *ProfileMutation) Filter() *ProfileFilter {
	return &ProfileFilter{config: m.config, predicateAdder: m}
}

// ProfileFilter provides a generic filtering capability at runtime for ProfileQuery.
type ProfileFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ProfileFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ProfileFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(profile.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *ProfileFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(profile.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *ProfileFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(profile.FieldUpdateTime))
}

// WhereSub applies the entql string predicate on the sub field.
func (f *ProfileFilter) WhereSub(p entql.StringP) {
	f.Where(p.Field(profile.FieldSub))
}

// WhereName applies the entql string predicate on the name field.
func (f *ProfileFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(profile.FieldName))
}

// WhereGender applies the entql string predicate on the gender field.
func (f *ProfileFilter) WhereGender(p entql.StringP) {
	f.Where(p.Field(profile.FieldGender))
}
